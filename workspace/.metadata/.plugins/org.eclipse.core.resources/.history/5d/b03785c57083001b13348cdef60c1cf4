/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "hamming_fft.h"

//Format: Re0,Im0,Re1,Im1,...
int32 ping[2 * BUFF_LENGTH];
int32 pong[2 * BUFF_LENGTH];
int32* InBuf = ping;
int32* OutBuf = pong;

int alarm_detect(u32 i2sAddr, u32 uartAddr)
{
    int index = 0;
    u32 userInput = 0;
    int32_t ping[2*BUFF_LENGTH];
    int32_t pong[2*BUFF_LENGTH];
    int32_t* InBuf;
    int32_t* OutBuf;
    InBuf = ping;
    OutBuf = pong;
    declare();
    while(userInput != 'q'){
        xil_printf("sample data\n\r");
        // lower start flag
        PMODMIC_mWriteReg(XPAR_PMODMIC_0_S_AXI_BASEADDR,4,0);
        TimerDelay(100);
        PMODMIC_mWriteReg(XPAR_PMODMIC_0_S_AXI_BASEADDR,4,1);
        for (index = 1; index < 2*BUFF_LENGTH ; index++)
        {
            if (PMODMIC_mReadReg(XPAR_PMODMIC_0_S_AXI_BASEADDR,8) == 1){
                OutBuf[index] = (unsigned int)PMODMIC_mReadReg(XPAR_PMODMIC_0_S_AXI_BASEADDR,0);
                // slv_reg1(0) is start conversion flag: start conversion
                PMODMIC_mWriteReg(XPAR_PMODMIC_0_S_AXI_BASEADDR,4,1);
            }
            else
                // don't start flag
                PMODMIC_mWriteReg(XPAR_PMODMIC_0_S_AXI_BASEADDR,4,0);
            TimerDelay(200);// controlling sampling rate to 5KHz
        }

        // debug print odd samples are zero
        int i;
        xil_printf("Sample Data\n\r");
        for(i = 0; i < 2*BUFF_LENGTH;i++){
            xil_printf("%d %d\n\r", i, OutBuf[i]);
        }
        xil_printf("Data end\n\r");

        doHamming(OutBuf);

        printf("Windowed data\n\r");
        for(i = 0; i< BUFF_LENGTH;i++){
            xil_printf("%d %d %d\n\r", i, OutBuf[2*i], OutBuf[2*i + 1]);
            printf("Data end\n\r");
            doFFT(OutBuf);

            printf("FFT data\n\r");
            for(i = 0; i< BUFF_LENGTH;i++){
                xil_printf("%d %d, i%d\n\r", i, OutBuf[2*i], OutBuf[2*i + 1]);
            }
            printf("Data end\n\r");

            doLogMagSq(OutBuf);

            printf("Magnitude square DB\n\r");
            for(i = 0; i< 2*BUFF_LENGTH;i++){
                if (i%2==0)
                    xil_printf("%d %d\n\r", i/2, OutBuf[i]);
            }
            printf("Data end\n\r");

            // UART
            if (XUartPs_IsReceiveData(uartAddr))
            {
                // Store the first character in the UART receive FIFO
                Digital Systems Project â€“ Embedded by Prawat Nagvajara
                userInput = XUartPs_ReadReg(uartAddr, XUARTPS_FIFO_OFFSET);
            }
            // clear buffers
            int i;
            for(i = 0; i< BUFF_LENGTH;i++){
                InBuf[2*i] = 0;
                InBuf[2*i+1] = 0;
                OutBuf[2*i] = 0;
                OutBuf[2*i+1] = 0;
            }
        }
        xil_printf("Done!\n\r");
        TimerDelay(500000);
        return XST_SUCCESS;
    }
}

void AudioPrintMenu()
{
    xil_printf("\x1B[H"); //Set cursor to top left of terminal
    xil_printf("\x1B[2J"); //Clear terminal
    xil_printf("**************************************************\n\r");
    xil_printf("*         ZYBO Audio Codec User Demo             *\n\r");
    xil_printf("**************************************************\n\r");
    xil_printf("*         * Remove headphones from ears and turn *\n\r");
    xil_printf("* WARNING * down the volume of any external      *\n\r");
    xil_printf("*         * speakers connected to HPH OUT        *\n\r");
    xil_printf("**************************************************\n\r");
    xil_printf("\n\r");
    xil_printf("1 - Generate tone on HPH OUT\n\r");
    xil_printf("2 - Record from LINE IN\n\r");
    xil_printf("3 - Record from MIC IN\n\r");
    if (recordingValid)
        xil_printf("4 - Play recording on HPH OUT\n\r");
    xil_printf("5 - Bypass from MIC IN + Delay\n\r");
    xil_printf("6 - Bypass from MIC IN + Delay + Feedback\n\r");
    xil_printf("q - Quit\n\r");
    xil_printf("\n\r");
    xil_printf("Enter a selection:");
}



int main()
{
    init_platform();

    print("Hello World\n\r");
    print("Successfully ran Hello World application");
    cleanup_platform();
    return 0;
}


