/*
 * hamming_fft.c
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdint.h>
#include "hamming_fft.h"
#include "xil_types.h"
#include "xil_io.h"
#include "xil_printf.h"

uint8_t hamming[] =
{20,20,21,22,24,25,27,
        29,31,34,37,30,44,47,51,
        55,59,64,68,73,78,83,88,
        94,99,105,110,116,122,128,133,
        139,145,151,157,162,168,174,179,
        184,190,195,200,205,210,214,218,
        223,226,230,234,237,240,243,245,
        247,249,251,253,254,255,255,255,
        255,255,255,254,253,251,249,247,
        245,243,240,237,234,230,226,223,
        218,214,210,205,200,195,190,184,
        179,174,168,162,157,151,145,139,
        133,128,122,116,110,105,99,94,
        88,83,78,73,68,64,59,55,
        51,47,44,40,37,34,31,29,
        27,25,24,22,21,21,20,20
};

void declare(){
    InBuf = ping;
    OutBuf = pong;
}
void switch_buffers(void)
{
    if (InBuf == ping)
    {
        OutBuf = ping;
        InBuf = pong;
    }
    else
    {
        InBuf = ping;
        OutBuf = pong;
    }
}
// FFT uses swap
void swap(int32_t *i1, int32_t *i2)
{
    int32_t temp = *i1;
    *i1 = *i2;
    *i2 = temp;
}
void doFFT(int32_t *data)
{
    unsigned long nn = BUFF_LENGTH;
    unsigned long n = 0, mmax = 0, m = 0, j = 0, istep = 0, i =0;
    double wtemp =0, wr=0, wpr=0, wpi=0, wi=0, theta=0;
    double tempr=0, tempi=0;
    n = nn<<1;
    j=1;
    for (i=1; i<n; i+=2)
    {
        if (j>i)
        {
            swap(&data[j-1], &data[i-1]);
            swap(&data[j], &data[i]);
        }
        m = nn;
        while (m>=2 && j>m)
        {
            j -= m;
            m >>= 1;
        }
        j += m;
    };
    Digital Systems Project â€“ Embedded by Prawat Nagvajara
    mmax=2;
    while (n>mmax)
    {
        istep = mmax<<1;
        theta = -(2*3.141592/mmax);
        wtemp = sin(0.5*theta);
        wpr = -2.0*wtemp*wtemp;
        wpi = sin(theta);
        wr = 1.0;
        wi = 0.0;
        for (m=1; m < mmax; m += 2)
        {
            for (i=m; i <= n; i += istep)
            {
                j=i+mmax;
                tempr = wr*data[j-1] - wi*data[j];
                tempi = wr*data[j] + wi*data[j-1];
                data[j-1] = data[i-1] - tempr;
                data[j] = data[i] - tempi;
                data[i-1] += tempr;
                data[i] += tempi;
            }
            wtemp=wr;
            wr += wr*wpr - wi*wpi;
            wi += wi*wpr + wtemp*wpi;
        }
        mmax=istep;
    }
}
//**********************
// data[2*BUFF_LENGTH] real, imaginary, ... format
//***********************
void doHamming(int32_t *data)
{
    int i;
    for( i = 0; i < BUFF_LENGTH; i++ )
    {
        data[2*i] = (hamming[i]*data[2*i])>>8;
        data[2*i+1] =0;
    }
}
// magnitude square into data[i]
// data[i] is zero for odd i
void doLogMagSq(int32_t* data){
    int i;
    int32_t k = 0;
    for(i=0; i< BUFF_LENGTH;i++)
    {
        // k = Re^2 + Im^2
        k = (data[2*i]*data[2*i] + data[2*i+1]*data[2*i+1]);
        if ( k==0 ) // preventing log0 = -infinity
            data[2*i] = 0;
        else
        {
            data[2*i] = log(k);
            data[2*i+1] = 0;
        }
    }
    int av = 0;
    for(i=4; i<BUFF_LENGTH/2; i++){
        av+= data[2*i];
    }
    av = av/(BUFF_LENGTH/2 - 4); // sum from 4 to BUFF_LENGTH/2
    // BIN_NUM corresponds to alarm frequency
    int res =data[2*BIN_NUM]- av;
    xil_printf("Result %d av %d\n\r",res,av);
    if(res > LogMagSQ_TH) {
        xil_printf("Alarm Detected\n\r");
        Xil_Out32(XPAR_LEDS_BASEADDR, 0xf);
    }
    else Xil_Out32(XPAR_LEDS_BASEADDR, 0x0);
}
