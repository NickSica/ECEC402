/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <unistd.h>

#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "xil_exception.h"

// Parameter definitions
#define INTC_DEVICE_ID         XPAR_PS7_SCUGIC_0_DEVICE_ID
#define TMR_DEVICE_ID          XPAR_PS7_SCUTIMER_0_DEVICE_ID
#define SWS_DEVICE_ID          XPAR_AXI_GPIO_0_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define INTC_TMR_INTERRUPT_ID  XPAR_SCUTIMER_INTR

//#define BTN_INT                XGPIO_IR_CH1_MASK

XGpio SWSInst;
XScuGic INTCInst;
static int sw_data = 0;
static int m_state = 0;

// Prototype Functions
static void SWS_Intr_Handler(void *);
static int IntcInit(u16, XScuTimer *, XGpio *);


int main()
{
    init_platform();
    int status;
    printf("Led blink started\r\n");

    //----------------------------------------------------
    // INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
    //----------------------------------------------------
    // Initialize LEDs
    status = XGpio_Initialize(&SWSInst, LED_DEVICE_ID);
    if(status != XST_SUCCESS) return XST_FAILURE;
    // Set all buttons direction to inputs
    XGpio_SetDataDirection(&SWSInst, 1, 0xFF);

    //----------------------------------------------------
    // SETUP THE TIMER
    //----------------------------------------------------
    // Initialize interrupt controller
    status = IntcInit(INTC_DEVICE_ID, &TMRInst, &BTNInst);
    if(status != XST_SUCCESS) return XST_FAILURE;

    // XScuTimer clock is 1/2 cpu clock, i.e., one second
    XScuTimer_LoadTimer(&TMRInst, TMR_FREQ);
    XScuTimer_EnableAutoReload(&TMRInst);
    XScuTimer_Start(&TMRInst);

    while(1);

    Xil_ExceptionDisable();
    XScuGic_Disconnect(&INTCInst, INTC_TMR_INTERRUPT_ID);
    cleanup_platform();
    return 0;
}

//----------------------------------------------------
// INTERRUPT HANDLER FUNCTIONS
// - called by the timer, button interrupt, performs
// - Knight rider LEDs
//----------------------------------------------------
void BTN_Intr_Handler(void *InstancePtr)
{
    // Disable GPIO interrupts
    XGpio_InterruptDisable(&BTNInst, BTN_INT);

    // Ignore additional button presses
    if((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) != BTN_INT) return;
    btn_value = XGpio_DiscreteRead(&BTNInst, 1);
    if(btn_value == 1)
        btn_data ^= 0b0001;
    else if(btn_value == 2)
        btn_data ^= 0b0010;
    else if(btn_value == 4)
        btn_data ^= 0b0100;
    else if(btn_value == 8)
        btn_data ^= 0b1000;

    (void)XGpio_InterruptClear(&BTNInst, BTN_INT);

    // Enable GPIO interrupts
    XGpio_InterruptEnable(&BTNInst, BTN_INT);
}

//----------------------------------------------------
// INITIAL SETUP FUNCTIONS
//----------------------------------------------------
int IntcInit(u16 DeviceId, XScuTimer *TmrInstancePtr, XGpio *GpioInstancePtr)
{
    XScuGic_Config *IntcConfig;
    XScuTimer_Config *TmrConfig;
    int status;

    // Interrupt controller initialization
    IntcConfig = XScuGic_LookupConfig(DeviceId);
    status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
    if(status != XST_SUCCESS) return XST_FAILURE;

    // Enable exceptions
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
            (Xil_ExceptionHandler)XScuGic_InterruptHandler,
            &INTCInst);
    Xil_ExceptionEnable();

    // Connect GPIO interrupt to handler
    status = XScuGic_Connect(&INTCInst,
            INTC_GPIO_INTERRUPT_ID,
            (Xil_ExceptionHandler)BTN_Intr_Handler,
            (void *)GpioInstancePtr);
    if(status != XST_SUCCESS) return XST_FAILURE;

    // Connect timer interrupt to handler
    TmrConfig = XScuTimer_LookupConfig(TMR_DEVICE_ID);
    status = XScuTimer_CfgInitialize(&TMRInst, TmrConfig, TmrConfig->BaseAddr);
    if(status != XST_SUCCESS) return XST_FAILURE;
    status = XScuGic_Connect(&INTCInst,
            INTC_TMR_INTERRUPT_ID,
            (Xil_ExceptionHandler)TMR_Intr_Handler,
            (void *)TmrInstancePtr);
    if(status != XST_SUCCESS) return XST_FAILURE;

    // Enable GPIO interrupts interrupt
    XGpio_InterruptEnable(GpioInstancePtr, 1);
    XGpio_InterruptGlobalEnable(GpioInstancePtr);

    // Enable GPIO and timer interrupts in the controller
    XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);
    XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);
    XScuTimer_EnableInterrupt(&TMRInst);
    return XST_SUCCESS;
}
